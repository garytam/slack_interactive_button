#!/usr/bin/env node
'use strict';

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _index = require('./index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = _yargs2.default.options({
  token: {
    alias: 't',
    describe: 'Slack verification token from the App management page',
    demand: true,
    type: 'string'
  },
  path: {
    alias: 'p',
    describe: 'The path (part of URL after hostname and port) that resolves to your Request URL in the App management page',
    default: '/slack/events',
    type: 'string'
  },
  port: {
    alias: 'l',
    describe: 'The local port for the HTTP server. The development proxy should be configured to forward to this port.',
    default: 3000,
    type: 'number'
  }
}).help().argv;

var slackEvents = (0, _index.createSlackEventAdapter)(argv.token);

/* eslint-disable no-console */
slackEvents.createServer(argv.path).then(function (server) {
  return new Promise(function (resolve, reject) {
    server.on('error', reject);
    server.listen(argv.port, function () {
      var _server$address = server.address(),
          address = _server$address.address,
          port = _server$address.port;

      console.log('The verification server is now listening at the URL: http://' + address + ':' + port + argv.path);
      resolve();
    });
  });
}).catch(function (error) {
  console.error('The verification server failed to start. error: ' + error.message);
});
/* eslint-enable no-console */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92ZXJpZnkuanMiXSwibmFtZXMiOlsiYXJndiIsIm9wdGlvbnMiLCJ0b2tlbiIsImFsaWFzIiwiZGVzY3JpYmUiLCJkZW1hbmQiLCJ0eXBlIiwicGF0aCIsImRlZmF1bHQiLCJwb3J0IiwiaGVscCIsInNsYWNrRXZlbnRzIiwiY3JlYXRlU2VydmVyIiwidGhlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2VydmVyIiwib24iLCJsaXN0ZW4iLCJhZGRyZXNzIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyb3IiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxPQUFPLGdCQUNWQyxPQURVLENBQ0Y7QUFDUEMsU0FBTztBQUNMQyxXQUFPLEdBREY7QUFFTEMsY0FBVSx1REFGTDtBQUdMQyxZQUFRLElBSEg7QUFJTEMsVUFBTTtBQUpELEdBREE7QUFPUEMsUUFBTTtBQUNKSixXQUFPLEdBREg7QUFFSkMsY0FBVSw2R0FGTjtBQUdKSSxhQUFTLGVBSEw7QUFJSkYsVUFBTTtBQUpGLEdBUEM7QUFhUEcsUUFBTTtBQUNKTixXQUFPLEdBREg7QUFFSkMsY0FBVSx5R0FGTjtBQUdKSSxhQUFTLElBSEw7QUFJSkYsVUFBTTtBQUpGO0FBYkMsQ0FERSxFQXFCVkksSUFyQlUsR0FzQlZWLElBdEJIOztBQXdCQSxJQUFNVyxjQUFjLG9DQUF3QlgsS0FBS0UsS0FBN0IsQ0FBcEI7O0FBRUE7QUFDQVMsWUFDR0MsWUFESCxDQUNnQlosS0FBS08sSUFEckIsRUFFR00sSUFGSCxDQUVRO0FBQUEsU0FBVSxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQy9DQyxXQUFPQyxFQUFQLENBQVUsT0FBVixFQUFtQkYsTUFBbkI7QUFDQUMsV0FBT0UsTUFBUCxDQUFjbkIsS0FBS1MsSUFBbkIsRUFBeUIsWUFBTTtBQUFBLDRCQUNIUSxPQUFPRyxPQUFQLEVBREc7QUFBQSxVQUNyQkEsT0FEcUIsbUJBQ3JCQSxPQURxQjtBQUFBLFVBQ1pYLElBRFksbUJBQ1pBLElBRFk7O0FBRTdCWSxjQUFRQyxHQUFSLGtFQUEyRUYsT0FBM0UsU0FBc0ZYLElBQXRGLEdBQTZGVCxLQUFLTyxJQUFsRztBQUNBUTtBQUNELEtBSkQ7QUFLRCxHQVBlLENBQVY7QUFBQSxDQUZSLEVBVUdRLEtBVkgsQ0FVUyxVQUFDQyxLQUFELEVBQVc7QUFDaEJILFVBQVFHLEtBQVIsc0RBQWlFQSxNQUFNQyxPQUF2RTtBQUNELENBWkg7QUFhQSIsImZpbGUiOiJ2ZXJpZnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IHlhcmdzIGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGNyZWF0ZVNsYWNrRXZlbnRBZGFwdGVyIH0gZnJvbSAnLi9pbmRleCc7XG5cbmNvbnN0IGFyZ3YgPSB5YXJnc1xuICAub3B0aW9ucyh7XG4gICAgdG9rZW46IHtcbiAgICAgIGFsaWFzOiAndCcsXG4gICAgICBkZXNjcmliZTogJ1NsYWNrIHZlcmlmaWNhdGlvbiB0b2tlbiBmcm9tIHRoZSBBcHAgbWFuYWdlbWVudCBwYWdlJyxcbiAgICAgIGRlbWFuZDogdHJ1ZSxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gICAgcGF0aDoge1xuICAgICAgYWxpYXM6ICdwJyxcbiAgICAgIGRlc2NyaWJlOiAnVGhlIHBhdGggKHBhcnQgb2YgVVJMIGFmdGVyIGhvc3RuYW1lIGFuZCBwb3J0KSB0aGF0IHJlc29sdmVzIHRvIHlvdXIgUmVxdWVzdCBVUkwgaW4gdGhlIEFwcCBtYW5hZ2VtZW50IHBhZ2UnLFxuICAgICAgZGVmYXVsdDogJy9zbGFjay9ldmVudHMnLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgfSxcbiAgICBwb3J0OiB7XG4gICAgICBhbGlhczogJ2wnLFxuICAgICAgZGVzY3JpYmU6ICdUaGUgbG9jYWwgcG9ydCBmb3IgdGhlIEhUVFAgc2VydmVyLiBUaGUgZGV2ZWxvcG1lbnQgcHJveHkgc2hvdWxkIGJlIGNvbmZpZ3VyZWQgdG8gZm9yd2FyZCB0byB0aGlzIHBvcnQuJyxcbiAgICAgIGRlZmF1bHQ6IDMwMDAsXG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICB9LFxuICB9KVxuICAuaGVscCgpXG4gIC5hcmd2O1xuXG5jb25zdCBzbGFja0V2ZW50cyA9IGNyZWF0ZVNsYWNrRXZlbnRBZGFwdGVyKGFyZ3YudG9rZW4pO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5zbGFja0V2ZW50c1xuICAuY3JlYXRlU2VydmVyKGFyZ3YucGF0aClcbiAgLnRoZW4oc2VydmVyID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzZXJ2ZXIub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICBzZXJ2ZXIubGlzdGVuKGFyZ3YucG9ydCwgKCkgPT4ge1xuICAgICAgY29uc3QgeyBhZGRyZXNzLCBwb3J0IH0gPSBzZXJ2ZXIuYWRkcmVzcygpO1xuICAgICAgY29uc29sZS5sb2coYFRoZSB2ZXJpZmljYXRpb24gc2VydmVyIGlzIG5vdyBsaXN0ZW5pbmcgYXQgdGhlIFVSTDogaHR0cDovLyR7YWRkcmVzc306JHtwb3J0fSR7YXJndi5wYXRofWApO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KSlcbiAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYFRoZSB2ZXJpZmljYXRpb24gc2VydmVyIGZhaWxlZCB0byBzdGFydC4gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgfSk7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiJdfQ==
//# sourceMappingURL=verify.js.map