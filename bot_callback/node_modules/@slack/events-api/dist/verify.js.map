{"version":3,"sources":["../src/verify.js"],"names":["argv","options","token","alias","describe","demand","type","path","default","port","help","slackEvents","createServer","then","Promise","resolve","reject","server","on","listen","address","console","log","catch","error","message"],"mappings":";;AAEA;;;;AACA;;;;AAEA,IAAMA,OAAO,gBACVC,OADU,CACF;AACPC,SAAO;AACLC,WAAO,GADF;AAELC,cAAU,uDAFL;AAGLC,YAAQ,IAHH;AAILC,UAAM;AAJD,GADA;AAOPC,QAAM;AACJJ,WAAO,GADH;AAEJC,cAAU,6GAFN;AAGJI,aAAS,eAHL;AAIJF,UAAM;AAJF,GAPC;AAaPG,QAAM;AACJN,WAAO,GADH;AAEJC,cAAU,yGAFN;AAGJI,aAAS,IAHL;AAIJF,UAAM;AAJF;AAbC,CADE,EAqBVI,IArBU,GAsBVV,IAtBH;;AAwBA,IAAMW,cAAc,oCAAwBX,KAAKE,KAA7B,CAApB;;AAEA;AACAS,YACGC,YADH,CACgBZ,KAAKO,IADrB,EAEGM,IAFH,CAEQ;AAAA,SAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CC,WAAOC,EAAP,CAAU,OAAV,EAAmBF,MAAnB;AACAC,WAAOE,MAAP,CAAcnB,KAAKS,IAAnB,EAAyB,YAAM;AAAA,4BACHQ,OAAOG,OAAP,EADG;AAAA,UACrBA,OADqB,mBACrBA,OADqB;AAAA,UACZX,IADY,mBACZA,IADY;;AAE7BY,cAAQC,GAAR,kEAA2EF,OAA3E,SAAsFX,IAAtF,GAA6FT,KAAKO,IAAlG;AACAQ;AACD,KAJD;AAKD,GAPe,CAAV;AAAA,CAFR,EAUGQ,KAVH,CAUS,UAACC,KAAD,EAAW;AAChBH,UAAQG,KAAR,sDAAiEA,MAAMC,OAAvE;AACD,CAZH;AAaA","file":"verify.js","sourcesContent":["\n\nimport yargs from 'yargs';\nimport { createSlackEventAdapter } from './index';\n\nconst argv = yargs\n  .options({\n    token: {\n      alias: 't',\n      describe: 'Slack verification token from the App management page',\n      demand: true,\n      type: 'string',\n    },\n    path: {\n      alias: 'p',\n      describe: 'The path (part of URL after hostname and port) that resolves to your Request URL in the App management page',\n      default: '/slack/events',\n      type: 'string',\n    },\n    port: {\n      alias: 'l',\n      describe: 'The local port for the HTTP server. The development proxy should be configured to forward to this port.',\n      default: 3000,\n      type: 'number',\n    },\n  })\n  .help()\n  .argv;\n\nconst slackEvents = createSlackEventAdapter(argv.token);\n\n/* eslint-disable no-console */\nslackEvents\n  .createServer(argv.path)\n  .then(server => new Promise((resolve, reject) => {\n    server.on('error', reject);\n    server.listen(argv.port, () => {\n      const { address, port } = server.address();\n      console.log(`The verification server is now listening at the URL: http://${address}:${port}${argv.path}`);\n      resolve();\n    });\n  }))\n  .catch((error) => {\n    console.error(`The verification server failed to start. error: ${error.message}`);\n  });\n/* eslint-enable no-console */\n"]}