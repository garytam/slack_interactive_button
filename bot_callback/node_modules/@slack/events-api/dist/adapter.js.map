{"version":3,"sources":["../src/adapter.js"],"names":["debug","SlackEventAdapter","verificationToken","options","TypeError","includeBody","includeHeaders","waitForResponse","path","Promise","resolve","then","all","express","bodyParser","app","use","json","post","expressMiddleware","createServer","port","reject","server","on","listen","close","error","Error","middlewareOptions"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,QAAQ,qBAAa,2BAAb,CAAd;;IAEqBC,iB;;;AACnB,6BAAYC,iBAAZ,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC3C,QAAI,CAAC,sBAASD,iBAAT,CAAL,EAAkC;AAChC,YAAM,IAAIE,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAH0C;;AAO3C,UAAKF,iBAAL,GAAyBA,iBAAzB;AACA,UAAKG,WAAL,GAAmB,CAAC,CAACF,QAAQE,WAAV,IAAyB,KAA5C;AACA,UAAKC,cAAL,GAAsB,CAAC,CAACH,QAAQG,cAAV,IAA4B,KAAlD;AACA,UAAKC,eAAL,GAAuB,CAAC,CAACJ,QAAQI,eAAV,IAA6B,KAApD;;AAEAP,UAAM,oCAAN,EAA4C;AAC1CK,mBAAa,MAAKA,WADwB;AAE1CC,sBAAgB,MAAKA,cAFqB;AAG1CC,uBAAiB,MAAKA;AAHoB,KAA5C;AAZ2C;AAiB5C;;AAED;;;;;mCACqC;AAAA;;AAAA,UAAxBC,IAAwB,uEAAjB,eAAiB;;AACnC;AACA,aAAOC,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB;AAAA,eAAMF,QAAQG,GAAR,CAAY,0BAChC,SADgC,8BAEhC,aAFgC,IAAZ,CAAN;AAAA,OAAvB,EAYND,IAZM,CAYD,gBAA2B;AAAA;AAAA,YAAzBE,OAAyB;AAAA,YAAhBC,UAAgB;;AAC/B,YAAMC,MAAMF,SAAZ;AACAE,YAAIC,GAAJ,CAAQF,WAAWG,IAAX,EAAR;AACAF,YAAIG,IAAJ,CAASV,IAAT,EAAe,OAAKW,iBAAL,EAAf;;AAEAnB,cAAM,2BAAN,EAAmCQ,IAAnC;;AAEA,eAAO,eAAKY,YAAL,CAAkBL,GAAlB,CAAP;AACD,OApBM,CAAP;AAqBD;;;0BAEKM,I,EAAM;AAAA;;AACV,aAAO,KAAKD,YAAL,GACJT,IADI,CACC;AAAA,eAAU,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUY,MAAV,EAAqB;AAC/C,iBAAKC,MAAL,GAAcA,MAAd;AACAA,iBAAOC,EAAP,CAAU,OAAV,EAAmBF,MAAnB;AACAC,iBAAOE,MAAP,CAAcJ,IAAd,EAAoB;AAAA,mBAAMX,QAAQa,MAAR,CAAN;AAAA,WAApB;AACAvB,gBAAM,2BAAN,EAAmCqB,IAAnC;AACD,SALe,CAAV;AAAA,OADD,CAAP;AAOD;;;2BAEM;AAAA;;AACL,aAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUY,MAAV,EAAqB;AACtC,YAAI,OAAKC,MAAT,EAAiB;AACf,iBAAKA,MAAL,CAAYG,KAAZ,CAAkB,UAACC,KAAD,EAAW;AAC3B,mBAAO,OAAKJ,MAAZ;AACA,gBAAII,KAAJ,EAAW;AACTL,qBAAOK,KAAP;AACD,aAFD,MAEO;AACLjB;AACD;AACF,WAPD;AAQD,SATD,MASO;AACLY,iBAAO,IAAIM,KAAJ,CAAU,8DAAV,CAAP;AACD;AACF,OAbM,CAAP;AAcD;;;wCAEyC;AAAA,UAAxBC,iBAAwB,uEAAJ,EAAI;;AACxC,aAAO,gDAAwB,IAAxB,EAA8BA,iBAA9B,CAAP;AACD;;;;;;kBA3EkB5B,iB","file":"adapter.js","sourcesContent":["import EventEmitter from 'events';\nimport http from 'http';\nimport isString from 'lodash.isstring';\nimport debugFactory from 'debug';\nimport { createExpressMiddleware } from './express-middleware';\n\nconst debug = debugFactory('@slack/events-api:adapter');\n\nexport default class SlackEventAdapter extends EventEmitter {\n  constructor(verificationToken, options = {}) {\n    if (!isString(verificationToken)) {\n      throw new TypeError('SlackEventAdapter needs a verification token');\n    }\n\n    super();\n\n    this.verificationToken = verificationToken;\n    this.includeBody = !!options.includeBody || false;\n    this.includeHeaders = !!options.includeHeaders || false;\n    this.waitForResponse = !!options.waitForResponse || false;\n\n    debug('adapter instantiated - options: %o', {\n      includeBody: this.includeBody,\n      includeHeaders: this.includeHeaders,\n      waitForResponse: this.waitForResponse,\n    });\n  }\n\n  // TODO: options (like https)\n  createServer(path = '/slack/events') {\n    // NOTE: this is a workaround for a shortcoming of the System.import() tranform\n    return Promise.resolve().then(() => Promise.all([\n      System.import('express'),\n      System.import('body-parser'),\n      // import('express'),\n      // import('body-parser'),\n\n      // The previous lines should be written as the comment following it, since `System.import()`\n      // is going to disappear after dynamic imports land (https://github.com/tc39/proposal-dynamic-import).\n      // There are no babel transforms for this syntax that seem to work at the moment. The\n      // following was meant to work but ended up not working:\n      // https://github.com/pwmckenna/babel-plugin-transform-import-commonjs.\n    ]))\n    .then(([express, bodyParser]) => {\n      const app = express();\n      app.use(bodyParser.json());\n      app.post(path, this.expressMiddleware());\n\n      debug('server created - path: %s', path);\n\n      return http.createServer(app);\n    });\n  }\n\n  start(port) {\n    return this.createServer()\n      .then(server => new Promise((resolve, reject) => {\n        this.server = server;\n        server.on('error', reject);\n        server.listen(port, () => resolve(server));\n        debug('server started - port: %s', port);\n      }));\n  }\n\n  stop() {\n    return new Promise((resolve, reject) => {\n      if (this.server) {\n        this.server.close((error) => {\n          delete this.server;\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        reject(new Error('SlackEventAdapter cannot stop when it did not start a server'));\n      }\n    });\n  }\n\n  expressMiddleware(middlewareOptions = {}) {\n    return createExpressMiddleware(this, middlewareOptions);\n  }\n\n}\n"]}